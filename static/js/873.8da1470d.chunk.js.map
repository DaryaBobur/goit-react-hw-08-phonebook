{"version":3,"file":"static/js/873.8da1470d.chunk.js","mappings":"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","sources":["components/UniversalStyles/ContainerStyled.js","components/ContactsForm/ContactsFormStyled.js","components/ContactsForm/ContactsForm.jsx","redux/contacts/selectors.js","components/ContactsList/ContactsListStyled.js","components/ContactsList/ContactsList.jsx","components/Filter/FilterStyled.js","components/Filter/Filter.jsx","page/Contacts/ContactsStyled.js","page/Contacts/Contacts.jsx"],"sourcesContent":["import styled from '@emotion/styled'\n\nexport const Container = styled.div`\n    padding-top: 50px;\n    padding-left: 30px;\n    padding-bottom: 30px;\n`\n","import styled from '@emotion/styled'\n\nexport const Form = styled.form`\nwidth: 250px;\npadding: 20px;\nborder: 2px solid #e7e5e5;\nmargin-bottom: 30px;\n\n\nbutton {\n    display: inline-block;\n    border: 0;\n    padding: 5px 10px;\n    box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\n    border-radius: 4px;\n    color: #2a2a2a;\n    \n    font-weight: 700;\n    font-size: 14px;\n    line-height: 1.88;\n    letter-spacing: 0.06em;\n    background-color: #cad7e3;\n    cursor: pointer;\n    transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n   \n    :hover, :focus {\n        background-color: #a5bacd;\n        color: #544d4d;\n    }\n}\n`","import PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { Form } from './ContactsFormStyled';\nimport { addContact} from 'redux/contacts/operations';\n// import { BsPersonPlusFill, BsPhone } from \"react-icons/bs\";\n\nimport PersonAddAltSharpIcon from '@mui/icons-material/PersonAddAltSharp';\nimport PhoneIphoneSharpIcon from '@mui/icons-material/PhoneIphoneSharp';\nimport TextField from '@mui/material/TextField';\n\nconst ContactForm = () =>  {\n\n  const dispatch = useDispatch();\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const userInputId = nanoid();\n\n  const handleChange = evt => {\n    const { name, value } = evt.target;\n\n    switch(name) {\n      case 'name':\n      setName(value);       \n      break;\n\n      case 'number':\n      setNumber(value);\n      break;\n\n      default:\n      return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    dispatch(addContact({ name, number }));\n    resetForm();\n  };\n\n  const resetForm = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <div>\n      <PersonAddAltSharpIcon sx={{ color: 'action.active', mr: 1, my: 0.5 }}/>\n      <TextField \n      id={userInputId} \n\n      label=\"Name\" \n      variant=\"standard\"\n      value={name}\n      type=\"text\"\n      name=\"name\"\n      onChange={handleChange}\n      pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n      title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n      required\n      />\n</div>\n\n    <PhoneIphoneSharpIcon sx={{ color: 'action.active', mr: 1, my: 0.5 }}/>\n      <TextField \n      id={userInputId} \n      margin=\"normal\"\n      label=\"Number\" \n      variant=\"standard\"\n      value={number}\n      type=\"tel\"\n      name=\"number\"\n      onChange={handleChange}\n      pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n      title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n      required\n      />\n\n      <button type=\"submit\">Add contact</button>\n    </Form>\n\n  );\n}\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func,\n}\n\nexport default ContactForm;","export const getFilter = state => state.filter.filterContacts;\n\nexport const getContacts = state => state.contacts.items;\n\nexport const getIsLoading = state => state.contacts.isLoading;\n\nexport const getError = state => state.contacts.error;","import styled from '@emotion/styled'\n\nexport const Contacts = styled.ul`\npadding-left: 0;\n\nli {\n    display: flex;\n\n    :not(:last-child) {\n        margin-bottom: 15px;\n    }\n}\n\np {\n    display: flex;\n    align-items: center;\n    font-size: 18px;\n    font-weight: 500;\n\n    svg {\n        width: 20px;\n        height: 20px;\n        margin-right: 5px;\n        fill: #2a2a2a;\n    }\n}\n\nbutton {\n    margin-left: 10px;\n\n    display: flex;\n    border: 0;\n    padding: 8px 8px;\n    box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\n    border-radius: 2px;\n    color: #2a2a2a;\n    \n    font-weight: 700;\n    font-size: 12px;\n    line-height: 1.88;\n    letter-spacing: 0.06em;\n    background-color: #cad7e3;\n    cursor: pointer;\n    transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n   \n    :hover, :focus {\n        background-color: #a5bacd;\n        color: #544d4d;\n    }\n}\n`","import PropTypes from 'prop-types';\nimport { nanoid } from 'nanoid';\nimport { useDispatch } from 'react-redux';\nimport { Contacts } from './ContactsListStyled';\nimport { deleteContact } from '../../redux/contacts/operations'\nimport { BsFillTrashFill, BsPersonCircle } from \"react-icons/bs\";\n\nconst ContactsList = ({ contacts }) => {\n   const dispatch = useDispatch();\n   return (  \n      <Contacts>\n         {contacts.map(({ name, number, id }) => ( \n            <li key={nanoid()}>\n               <p><BsPersonCircle/> {name} : {number}</p>\n               <button type='button' onClick={()=> dispatch(deleteContact(id))}>\n                  <BsFillTrashFill/>\n               </button>\n            </li>\n         ))}\n      </Contacts>\n   )\n}\n\nContactsList.propTypes = {\n   removeContact: PropTypes.func,\n   contacts: PropTypes.arrayOf(PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n   }))\n}\n\nexport default ContactsList;","import styled from '@emotion/styled'\n\nexport const Label = styled.label`\n    font-size: 18px;\n    font-weight: 500;\n    display: flex;\n    flex-direction: column;\n    width: 200px;\n    margin-bottom: 15px;\n\ninput {\n    padding-top: 3px;\n    padding-bottom: 3px;\n    font-size: 14px;\n    border-color: gray;\n    border-style: solid;\n    outline: none;\n    border-image: none;\n    border-width: 1px ;\n    border-radius: 2px;\n    caret-color: #2196f3;\n\n    :focus {\n        border-color: #2196f3;\n    }\n}\n`","import PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { filterName } from 'redux/contacts/filterSlice';\nimport { getFilter, getContacts, getIsLoading, getError } from \"redux/contacts/selectors\";\nimport ContactsList from \"components/ContactsList/ContactsList\";\nimport { Label } from \"./FilterStyled\";\nimport Loader from 'components/Loader/Loader';\n\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const dataFilter = useSelector(getFilter);\n  const dataContacts = useSelector(getContacts);\n  const isLoading = useSelector(getIsLoading);\n  const isError = useSelector(getError);\n\n  const filterNamesContacts = e => {\n    dispatch(filterName(e.target.value))\n  };\n  \n  const getFilteredContacts = () => {\n \n    if(!dataFilter) {\n      return dataContacts;\n    }\n\n    const normalizedFilter = dataFilter.toLocaleLowerCase();\n\n    const filteredContacts = dataContacts.filter(({ name }) => {\n      const normalizedName = name.toLocaleLowerCase();\n      return normalizedName.includes(normalizedFilter);\n    })\n\n    return filteredContacts;\n    \n  };\n\n  return (\n    <>\n      <Label>\n        Find contacts by name\n        <input type=\"text\" \n        value={dataFilter} \n        name=\"filter\" \n        onChange={filterNamesContacts} />\n      </Label>\n\n      {dataContacts && <ContactsList contacts={getFilteredContacts()} />}\n      {isLoading && !isError && <Loader/>}\n    </>\n  )\n}\n\nFilter.propTypes = {\n  onChange: PropTypes.func,\n}\n  \nexport default Filter;","import styled from '@emotion/styled'\n\nexport const TitlePhonebook = styled.h1`\n    display: flex;\n    align-items: center;\n    margin-bottom: 20px;\n`\n\nexport const SubtitleContacts = styled.h2`\n    margin-bottom: 25px;\n    font-size: 26px;\n`","import ContactForm from '../../components/ContactsForm/ContactsForm';\nimport Filter from '../../components/Filter/Filter';\nimport { FcPhoneAndroid } from \"react-icons/fc\";\nimport { TitlePhonebook, SubtitleContacts } from './ContactsStyled';\nimport { Container } from 'components/UniversalStyles/ContainerStyled';\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\n\n\nconst Contacts = () => {\n\nconst dispatch = useDispatch();\n  useEffect(() => {\n      dispatch(fetchContacts());\n  }, [dispatch]);\n\nreturn (\n    <Container>\n    \n      <TitlePhonebook>\n        <FcPhoneAndroid/>\n        Phonebook\n      </TitlePhonebook>\n\n      <ContactForm />\n\n      <SubtitleContacts>Contacts:</SubtitleContacts>\n\n      <Filter /> \n    </Container>\n)\n}\n\nexport default Contacts;"],"names":["Container","styled","Form","dispatch","useDispatch","useState","name","setName","number","setNumber","userInputId","nanoid","handleChange","evt","target","value","resetForm","onSubmit","e","preventDefault","addContact","PersonAddAltSharp","sx","color","mr","my","TextField","id","label","variant","type","onChange","pattern","title","required","PhoneIphoneSharp","margin","getFilter","state","filter","filterContacts","getContacts","contacts","items","getIsLoading","isLoading","getError","error","Contacts","map","onClick","deleteContact","Label","dataFilter","useSelector","dataContacts","isError","filterName","normalizedFilter","toLocaleLowerCase","includes","getFilteredContacts","Loader","TitlePhonebook","SubtitleContacts","useEffect","fetchContacts"],"sourceRoot":""}